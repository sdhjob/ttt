#pragma once
#include <sou/vm/opcodes_def.hpp>
#include <sou/vm/variant.hpp>

#include <map>

namespace sou { namespace vm {
   enum opcodes {
      SOU_VM_CONTROL_FLOW_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_BR_TABLE_OP(SOU_VM_CREATE_ENUM)
      SOU_VM_RETURN_OP(SOU_VM_CREATE_ENUM)
      SOU_VM_CALL_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_CALL_IMM_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_PARAMETRIC_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_VARIABLE_ACCESS_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_MEMORY_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_I32_CONSTANT_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_I64_CONSTANT_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_F32_CONSTANT_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_F64_CONSTANT_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_COMPARISON_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_NUMERIC_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_CONVERSION_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_EXIT_OP(SOU_VM_CREATE_ENUM)
      SOU_VM_EMPTY_OPS(SOU_VM_CREATE_ENUM)
      SOU_VM_ERROR_OPS(SOU_VM_CREATE_ENUM)
   };
   
   struct opcode_utils {
      std::map<uint16_t, std::string> opcode_map{
         SOU_VM_CONTROL_FLOW_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_BR_TABLE_OP(SOU_VM_CREATE_MAP)
         SOU_VM_RETURN_OP(SOU_VM_CREATE_MAP)
         SOU_VM_CALL_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_CALL_IMM_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_PARAMETRIC_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_VARIABLE_ACCESS_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_MEMORY_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_I32_CONSTANT_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_I64_CONSTANT_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_F32_CONSTANT_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_F64_CONSTANT_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_COMPARISON_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_NUMERIC_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_CONVERSION_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_EXIT_OP(SOU_VM_CREATE_MAP)
         SOU_VM_EMPTY_OPS(SOU_VM_CREATE_MAP)
         SOU_VM_ERROR_OPS(SOU_VM_CREATE_MAP)
      };
   }; 

   enum imm_types {
      none,
      block_imm,
      varuint32_imm,
      br_table_imm,
   };


   SOU_VM_CONTROL_FLOW_OPS(SOU_VM_CREATE_CONTROL_FLOW_TYPES)
   SOU_VM_BR_TABLE_OP(SOU_VM_CREATE_BR_TABLE_TYPE)
   SOU_VM_RETURN_OP(SOU_VM_CREATE_CONTROL_FLOW_TYPES)
   SOU_VM_CALL_OPS(SOU_VM_CREATE_CALL_TYPES)
   SOU_VM_CALL_IMM_OPS(SOU_VM_CREATE_CALL_IMM_TYPES)
   SOU_VM_PARAMETRIC_OPS(SOU_VM_CREATE_TYPES)
   SOU_VM_VARIABLE_ACCESS_OPS(SOU_VM_CREATE_VARIABLE_ACCESS_TYPES)
   SOU_VM_MEMORY_OPS(SOU_VM_CREATE_MEMORY_TYPES)
   SOU_VM_I32_CONSTANT_OPS(SOU_VM_CREATE_I32_CONSTANT_TYPE)
   SOU_VM_I64_CONSTANT_OPS(SOU_VM_CREATE_I64_CONSTANT_TYPE)
   SOU_VM_F32_CONSTANT_OPS(SOU_VM_CREATE_F32_CONSTANT_TYPE)
   SOU_VM_F64_CONSTANT_OPS(SOU_VM_CREATE_F64_CONSTANT_TYPE)
   SOU_VM_COMPARISON_OPS(SOU_VM_CREATE_TYPES)
   SOU_VM_NUMERIC_OPS(SOU_VM_CREATE_TYPES)
   SOU_VM_CONVERSION_OPS(SOU_VM_CREATE_TYPES)
   SOU_VM_EXIT_OP(SOU_VM_CREATE_EXIT_TYPE)
   SOU_VM_EMPTY_OPS(SOU_VM_CREATE_TYPES)
   SOU_VM_ERROR_OPS(SOU_VM_CREATE_TYPES)

   using opcode = variant<
      SOU_VM_CONTROL_FLOW_OPS(SOU_VM_IDENTITY)
      SOU_VM_BR_TABLE_OP(SOU_VM_IDENTITY)
      SOU_VM_RETURN_OP(SOU_VM_IDENTITY)
      SOU_VM_CALL_OPS(SOU_VM_IDENTITY)
      SOU_VM_CALL_IMM_OPS(SOU_VM_IDENTITY)
      SOU_VM_PARAMETRIC_OPS(SOU_VM_IDENTITY)
      SOU_VM_VARIABLE_ACCESS_OPS(SOU_VM_IDENTITY)
      SOU_VM_MEMORY_OPS(SOU_VM_IDENTITY)
      SOU_VM_I32_CONSTANT_OPS(SOU_VM_IDENTITY)
      SOU_VM_I64_CONSTANT_OPS(SOU_VM_IDENTITY)
      SOU_VM_F32_CONSTANT_OPS(SOU_VM_IDENTITY)
      SOU_VM_F64_CONSTANT_OPS(SOU_VM_IDENTITY)
      SOU_VM_COMPARISON_OPS(SOU_VM_IDENTITY)
      SOU_VM_NUMERIC_OPS(SOU_VM_IDENTITY)
      SOU_VM_CONVERSION_OPS(SOU_VM_IDENTITY)
      SOU_VM_EXIT_OP(SOU_VM_IDENTITY)
      SOU_VM_EMPTY_OPS(SOU_VM_IDENTITY)
      SOU_VM_ERROR_OPS(SOU_VM_IDENTITY_END)
      >;
}} // namespace sou::vm
